# 文件夹不存在则创建，存在则删除并创建
function(MAKE_DIR_FORCE PATH)
    if(NOT EXISTS ${PATH})
        file(MAKE_DIRECTORY ${PATH})
    else ()
        file(REMOVE_RECURSE ${PATH})
        file(MAKE_DIRECTORY ${PATH})
    endif()
endfunction()

# 文件夹不存在则创建
function(MAKE_DIR PATH)
    if(NOT EXISTS ${PATH})
        file(MAKE_DIRECTORY ${PATH})
    endif()
endfunction()

function(COMPILE_SHADER shader_file output_dir)
    # 获取文件的扩展名（例如，.vert 或 .frag）
    get_filename_component(SHADER_EXT ${shader_file} EXT)
    get_filename_component(SHADER_NAME ${shader_file} NAME_WE)
    string(SUBSTRING ${SHADER_EXT} 1 -1 SHADER_EXT)       # 去掉最前面的 “.” 符号
    string(TOUPPER ${SHADER_EXT} SHADER_EXT)
    string(TOUPPER ${SHADER_NAME} SHADER_NAME)
    set(OUTPUT_NAME "${SHADER_NAME}_${SHADER_EXT}")

    # 提取最近一级的目录名
    get_filename_component(DIR_NAME ${shader_file} DIRECTORY)
    get_filename_component(PARENT_DIR "${DIR_NAME}" NAME)

    # 构建输出文件路径
    set(output_file_spv "${output_dir}/vulkan/${PARENT_DIR}/${OUTPUT_NAME}.spv")
    set(output_file_gles "${output_dir}/gles/${PARENT_DIR}/${OUTPUT_NAME}.gles")
    set(output_file_gl "${output_dir}/gl/${PARENT_DIR}/${OUTPUT_NAME}.gl")

    # 检查输出目录是否存在，如果不存在则创建
    MAKE_DIR(${output_dir}/vulkan/${PARENT_DIR})
    MAKE_DIR(${output_dir}/gles/${PARENT_DIR})
    MAKE_DIR(${output_dir}/gl/${PARENT_DIR})

    # 调用 glslangValidator 编译 GLSL 文件
    execute_process(
            COMMAND ${GLSL_LANG_VALIDATOR} -V ${shader_file} -o ${output_file_spv} -I${PATH_SHADER_INCLUDE}
            RESULT_VARIABLE result
            OUTPUT_VARIABLE output
            ERROR_VARIABLE error
    )
    if(NOT result EQUAL 0)
        message(FATAL_ERROR "Failed to compile shader: ${shader_file}\nError: ${output}")
    else()
        message(STATUS "Shader compiled successfully: ${shader_file} -> ${output_file_spv}")
    endif()

    # 调用 spriv-cross 编译 spv 文件
    execute_process(
            COMMAND ${SPIRV_CROSS} --version 310 --es ${output_file_spv} --output ${output_file_gles}
            RESULT_VARIABLE result
            OUTPUT_VARIABLE output
            ERROR_VARIABLE error
    )
    if(NOT result EQUAL 0)
        message(FATAL_ERROR "Failed to compile shader: ${shader_file}\nError: ${output}")
    else()
        message(STATUS "Shader compiled successfully: ${output_file_spv} -> ${output_file_gles}")
    endif()

    # 调用 spriv-cross 编译 spv 文件
    execute_process(
            COMMAND ${SPIRV_CROSS} --version 420 ${output_file_spv} --output ${output_file_gl}
            RESULT_VARIABLE result
            OUTPUT_VARIABLE output
            ERROR_VARIABLE error
    )
    if(NOT result EQUAL 0)
        message(FATAL_ERROR "Failed to compile shader: ${shader_file}\nError: ${output}")
    else()
        message(STATUS "Shader compiled successfully: ${output_file_spv} -> ${output_file_gl}")
    endif()
endfunction()

# 遍历 shader 目录及其子目录，编译所有 GLSL 文件
function(COMPILE_ALL_SHADER input_dir output_dir)
    MAKE_DIR_FORCE(${output_dir}/vulkan)
    MAKE_DIR_FORCE(${output_dir}/gles)
    MAKE_DIR_FORCE(${output_dir}/gl)

    # 获取所有的 .vert 和 .frag 文件（包括子目录）
    file(GLOB_RECURSE shaders "${input_dir}/*.vert" "${input_dir}/*.frag")
    if(NOT shaders)
        message(WARNING "Unable to find any shader file, automatically quit compilation.")
        return()
    endif ()

    # 遍历所有 GLSL 文件，调用 compile_shader 函数进行编译
    foreach(shader IN LISTS shaders)
        compile_shader(${shader} ${output_dir})
    endforeach()
endfunction()


function(TRANSFORM_RESULT_SPV SPV_FILE OUTPUT_DIR)
    get_filename_component(OUTPUT_NAME ${SPV_FILE} NAME_WE)

    # 提取最近一级的目录名
    get_filename_component(DIR_NAME ${SPV_FILE} DIRECTORY)
    get_filename_component(PARENT_DIR "${DIR_NAME}" NAME)

    # 构建输出文件路径
    set(OUTPUT_FILE_NAME "${OUTPUT_DIR}/${PARENT_DIR}/${OUTPUT_NAME}.h")

    string(TIMESTAMP CURRENT_TIME "%Y-%m-%d %H:%M:%S")
    set(OUTPUT_FILE_HEADER "// This file is automatically generated, please do not alter it.\n// ${CURRENT_TIME}\n#pragma once\n")
    set(OUTPUT_FILE_DECLARE "#include <vector>\n\ninline std::vector<uint8_t> ${OUTPUT_NAME}_SPV = {\n")

    file(READ ${SPV_FILE} HEX_CONTENT HEX)
    string(REPEAT "[0-9a-f]" 32 pattern)
    string(REGEX REPLACE "(${pattern})" "\t\\1\n" CONTENT "${HEX_CONTENT}")
    string(REGEX REPLACE "([0-9a-f][0-9a-f])" "0x\\1, " CONTENT "${CONTENT}")
    string(REGEX REPLACE ", $" "" CONTENT "${CONTENT}")

    file(WRITE ${OUTPUT_FILE_NAME} "${OUTPUT_FILE_HEADER}\n${OUTPUT_FILE_DECLARE} ${CONTENT}\n};")

    message(STATUS "Shader transformed successfully: ${SPV_FILE} -> ${OUTPUT_FILE_NAME}")
endfunction()

function(TRANSFORM_RESULT_GL GL_FILE OUTPUT_DIR)
    get_filename_component(OUTPUT_NAME ${GL_FILE} NAME_WE)

    # 提取最近一级的目录名
    get_filename_component(DIR_NAME ${GL_FILE} DIRECTORY)
    get_filename_component(PARENT_DIR "${DIR_NAME}" NAME)

    # 构建输出文件路径
    set(OUTPUT_FILE_NAME "${OUTPUT_DIR}/${PARENT_DIR}/${OUTPUT_NAME}.h")

    string(TIMESTAMP CURRENT_TIME "%Y-%m-%d %H:%M:%S")
    set(OUTPUT_FILE_HEADER "// This file is automatically generated, please do not alter it.\n// ${CURRENT_TIME}\n#pragma once\n")
    set(OUTPUT_FILE_DECLARE "inline auto ${OUTPUT_NAME}_STR =\n")

    # 读取整个文件内容
    file(STRINGS "${GL_FILE}" FILE_LINES)

    # 初始化空字符串
    set(CONTENT "")
    foreach(LINE IN LISTS FILE_LINES)
        # 跳过空行（可选）
        if(NOT LINE STREQUAL "")
            set(PROCESSED_LINE "\"${LINE}\"")
            set(CONTENT "${CONTENT}\t${PROCESSED_LINE}\n")
        endif()
    endforeach()

    file(WRITE ${OUTPUT_FILE_NAME} "${OUTPUT_FILE_HEADER}\n${OUTPUT_FILE_DECLARE}${CONTENT};")

    message(STATUS "Shader transformed successfully: ${SPV_FILE} -> ${OUTPUT_FILE_NAME}")

endfunction()

# 将所有的spv二进制文件保存在头文件里
function(TRANSFORM_ALL_RESULT INPUT_DIR OUTPUT_DIR)
    MAKE_DIR_FORCE(${OUTPUT_DIR})

    file(GLOB_RECURSE files_spv "${INPUT_DIR}/vulkan/*.spv")
    foreach(file IN LISTS files_spv)
        TRANSFORM_RESULT_SPV(${file} ${OUTPUT_DIR}/vulkan)
    endforeach()

    file(GLOB_RECURSE files_gl "${INPUT_DIR}/gl/*.gl")
    foreach(file IN LISTS files_gl)
        TRANSFORM_RESULT_GL(${file} ${OUTPUT_DIR}/gl)
    endforeach()

    file(GLOB_RECURSE files_gles "${INPUT_DIR}/gles/*.gles")
    foreach(file IN LISTS files_gles)
        TRANSFORM_RESULT_GL(${file} ${OUTPUT_DIR}/gles)
    endforeach()
endfunction()
